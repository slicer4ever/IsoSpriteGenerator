#module Pixel DirectX11_1

struct PMaterial{
	float4 Diffuse;
	float4 Reflect0;
	float4 Reflect90;
	float pRoughness;
	float aRoughness;
};

Texture2D DiffuseColorTex;
Texture2D SpecularColorTex;
SamplerState DiffuseColorSmp;
SamplerState SpecularColorSmp;


float4 RenderDebug(Pixel In, uint RType, float4 Color, float Alpha) {
	float4 Diff = Material.MaterialColorA*SampleIf(DiffuseColorTex, DiffuseColorSmp, SGDiffuseColorTexID, In, true);
	float4 Spec = Material.MaterialColorB*SampleIf(SpecularColorTex, SpecularColorSmp, SGSpecularColorTexID, In, true);
	float Roughness = (1.0f-Spec.w);
	float Metallic = max(max(Spec.r, Spec.g), Spec.b);
	if(RType==RenderAlbedo) return ToneMap(Diff, Alpha);
	if(RType==RenderMetallic) return float4(1.0f, Metallic, Roughness, 1.0f);
	return Color;
}	

PMaterial PrepareMaterial(Pixel In, inout oPixel P, float3 Normal, float3 View, inout float Alpha){
	float4 Diff = Material.MaterialColorA;
	float4 Spec = Material.MaterialColorB;
	
	Diff *= SampleIf(DiffuseColorTex, DiffuseColorSmp, SGDiffuseColorTexID, In, true);
	Spec *= SampleIf(SpecularColorTex, SpecularColorSmp, SGSpecularColorTexID, In, true);
	
	PMaterial R;
	float Roughness = (1.0f-Spec.w);
	float Metallic = max(max(Spec.r, Spec.g), Spec.b);
	float Reflectance = saturate(Metallic*50.0f);
	float A = Roughness*Roughness;
	R.pRoughness = Roughness;
	R.aRoughness = A*A;
	R.Diffuse = Diff*(1.0f-Metallic);
	
	R.Reflect0 = Spec;
	R.Reflect90 = float4(Reflectance, Reflectance, Reflectance, Reflectance);
	Alpha = Alpha*Diff.a;
	
	P.Color += IBLRadianceGGX(Roughness, R.Reflect0, Normal, View);
	P.Color += IBLRadianceLambertian(R.Diffuse, Normal);
	return R;
}

float4 ProcessIBL(PMaterial Mat, float3 Normal, float3 View, float Att){
	float4 Spec = IBLRadianceGGX(Mat.pRoughness, Mat.Reflect0, Normal, View);
	float4 Diff = IBLRadianceLambertian(Mat.Diffuse, Normal);
	return (Spec+Diff)*Att;
}

float4 ProcessLight(Light L, LightResults LR, PMaterial Mat){
	const float pi = 3.1415926535897932384626433832795f;
	float A2 = Mat.aRoughness;
	
	float4 F = Mat.Reflect0+(Mat.Reflect90-Mat.Reflect0)*pow(saturate(1.0f-LR.VdotH), 5.0f);
	
    float GGXV = LR.NdotL*sqrt(LR.NdotV * LR.NdotV * (1.0 - A2) +A2);
    float GGXL = LR.NdotV*sqrt(LR.NdotL * LR.NdotL * (1.0 - A2) +A2);
	float G = max(GGXV+GGXL, 0.0f);
	if(G>0.0f) G = 0.5f/G;
	
	float K = (LR.NdotH*A2-LR.NdotH)*LR.NdotH+1.0;
	float D = A2/(pi*K*K);
	
	float4 fSpecular = F*G*D;
	float4 fDiffuse = (1.0f-F)*(Mat.Diffuse/pi);
	return float4(L.m_Color.xyz, 1.0f)*L.m_Color.w*LR.Att*LR.NdotL*(fSpecular+fDiffuse);
}

#module Pixel OpenGL4_5

struct PMaterial{
	vec4 Diffuse;
	vec4 Reflect0;
	vec4 Reflect90;
	float pRoughness;
	float aRoughness;
};

uniform sampler2D DiffuseColorTex;
uniform sampler2D SpecularColorTex;

PMaterial PrepareMaterial(inout float Alpha){
	vec4 Diff = Material.MaterialColorA;
	vec4 Spec = Material.MaterialColorB;
	
	Diff *= SampleIf(DiffuseColorTex, SGDiffuseColorTexID, true);
	Spec *= SampleIf(SpecularColorTex, SGSpecularColorTexID, true);
	
	PMaterial R;
	float Roughness = (1.0f-Spec.w);
	float Metallic = max(max(Spec.r, Spec.g), Spec.b);
	float Reflectance = clamp(Metallic*50.0f, 0.0f, 1.0f);
	float A = Roughness*Roughness;
	R.pRoughness = Roughness;
	R.aRoughness = A*A;
	R.Diffuse = Diff*(1.0f-Metallic);
	
	R.Reflect0 = Spec;
	R.Reflect90 = vec4(Reflectance, Reflectance, Reflectance, Reflectance);
	Alpha = Alpha*Diff.a;
	
	return R;
}

vec4 ProcessIBL(PMaterial Mat, vec3 Normal, vec3 View, float Att){
	vec4 Spec = IBLRadianceGGX(Mat.pRoughness, Mat.Reflect0, Normal, View);
	vec4 Diff = IBLRadianceLambertian(Mat.Diffuse, Normal);
	return (Spec+Diff)*Att;
}

vec4 ProcessLight(Light L, LightResults LR, PMaterial Mat){
	const float pi = 3.1415926535897932384626433832795f;
	float A2 = Mat.aRoughness;
	
	vec4 F = Mat.Reflect0+(Mat.Reflect90-Mat.Reflect0)*pow(clamp(1.0f-LR.VdotH, 0.0f, 1.0f), 5.0f);
	
    float GGXV = LR.NdotL*sqrt(LR.NdotV * LR.NdotV * (1.0 - A2) +A2);
    float GGXL = LR.NdotV*sqrt(LR.NdotL * LR.NdotL * (1.0 - A2) +A2);
	float G = max(GGXV+GGXL, 0.0f);
	if(G>0.0f) G = 0.5f/G;
	
	float K = (LR.NdotH*A2-LR.NdotH)*LR.NdotH+1.0;
	float D = A2/(pi*K*K);
	
	vec4 fSpecular = F*G*D;
	vec4 fDiffuse = (1.0f-F)*(Mat.Diffuse/pi);
	return vec4(L.m_Color.xyz, 1.0f)*L.m_Color.w*LR.Att*LR.NdotL*(fSpecular+fDiffuse);
}