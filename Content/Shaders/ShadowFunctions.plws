#module Pixel DirectX11_1
Texture2DArray DepthTex;
SamplerComparisonState DepthTexSampler;
TextureCubeArray DepthCubeTex;
SamplerComparisonState DepthCubeSampler;

float PCFFilter(float2 TexCoord, float Layer, float Depth, float Bias){
	float Att = 0.0f;
	Depth = saturate(Depth-Bias);
	Att += DepthTex.SampleCmpLevelZero(DepthTexSampler, float3(TexCoord, Layer), Depth, int2(-1,-1));
	Att += DepthTex.SampleCmpLevelZero(DepthTexSampler, float3(TexCoord, Layer), Depth, int2( 1,-1));
	Att += DepthTex.SampleCmpLevelZero(DepthTexSampler, float3(TexCoord, Layer), Depth, int2(-1, 1));
	Att += DepthTex.SampleCmpLevelZero(DepthTexSampler, float3(TexCoord, Layer), Depth, int2( 1, 1));
	return Att*0.25f;
}

float PCFFilterCube(float3 nDir, float Layer, float Depth, float Bias){
	float Att = 0.0f;
	//Calculate tangent+bitangent vectors to nDir.
	float3 YAxis = float3(0.0f, 1.0f, 0.0f);
	float3 XAxis = float3(1.0f, 0.0f, 0.0f);
	float Ctrl = step(abs(dot(nDir, YAxis)), 0.8f);
	
	float3 Tangent = normalize(cross(nDir, YAxis)*Ctrl + cross(nDir, XAxis)*(1.0f-Ctrl));
	float3 BiTangent = cross(nDir, Tangent);
	
	Tangent = Tangent*iShadowCubeSize.x*2.0f;
	BiTangent = BiTangent*iShadowCubeSize.y*2.0f;
		
	Depth = saturate(Depth-Bias);
	//Att += DepthCubeTex.SampleCmpLevelZero(DepthCubeSampler, float4(nDir, Layer), Depth);

	Att += DepthCubeTex.SampleCmpLevelZero(DepthCubeSampler, float4(nDir + Tangent*-1.0f + BiTangent*-1.0f, Layer), Depth);
	Att += DepthCubeTex.SampleCmpLevelZero(DepthCubeSampler, float4(nDir + Tangent* 1.0f + BiTangent*-1.0f, Layer), Depth);
	Att += DepthCubeTex.SampleCmpLevelZero(DepthCubeSampler, float4(nDir + Tangent*-1.0f + BiTangent* 1.0f, Layer), Depth);
	Att += DepthCubeTex.SampleCmpLevelZero(DepthCubeSampler, float4(nDir + Tangent* 1.0f + BiTangent* 1.0f, Layer), Depth);
	return Att*0.25f;
}

float doPointShadow(int TargetPass, float3 Dir, float3 nDir){
	if(TargetPass==-1) return 1.0f;
	float3 aDir = abs(Dir);
	//Calculate fragments z depth:
	float Z = max(max(aDir.x, aDir.y), aDir.z);
	float Depth = -TargetValues[TargetPass].y+TargetValues[TargetPass].z/Z;
	return PCFFilterCube(nDir, TargetValues[TargetPass].x, Depth, -0.00005f);
}

bool doDirectionShadow(int TargetPass, float4 TPositions[MaxPasses], out float Att){
	Att = 1.0f;
	if(TargetPass==-1) return false;
	float4 sPosition = TPositions[TargetPass];
	sPosition /= sPosition.w;
	float2 sTexCoord = float2(sPosition.x, -sPosition.y)*0.5f+0.5f;
	if(saturate(sTexCoord.x)!=sTexCoord.x || saturate(sTexCoord.y)!=sTexCoord.y || saturate(sPosition.z)!=sPosition.z) return false;

	Att = PCFFilter(sTexCoord, TargetValues[TargetPass].x, sPosition.z, -0.0001f);
	return true;
}

float doSpotShadow(int TargetPass, float4 TPositions[MaxPasses]){
	if(TargetPass==-1) return 1.0f;
	float4 sPosition = TPositions[TargetPass];
	sPosition /= sPosition.w;
	float2 sTexCoord = float2(sPosition.x, -sPosition.y)*0.5f+0.5f;
	return PCFFilter(sTexCoord, TargetValues[TargetPass].x, sPosition.z, 0.0f);
}

#module Pixel OpenGL4_5
uniform sampler2DArrayShadow DepthTex;
uniform samplerCubeArrayShadow DepthCubeTex;

float PCFFilter(vec2 TexCoord, float Layer, float Depth, float Bias){
	float Att = 0.0f;
	//Fix Z to 0-1 range:
	Depth = clamp((Depth*0.5f+0.5f)-Bias, 0.0f, 1.0f);
	Att += textureOffset(DepthTex, vec4(TexCoord, Layer, Depth), ivec2(-1, -1));
	Att += textureOffset(DepthTex, vec4(TexCoord, Layer, Depth), ivec2( 1, -1));
	Att += textureOffset(DepthTex, vec4(TexCoord, Layer, Depth), ivec2(-1, 1));
	Att += textureOffset(DepthTex, vec4(TexCoord, Layer, Depth), ivec2( 1, 1));
			
	return Att*0.25f;
}

float PCFFilterCube(vec3 nDir, float Layer, float Depth, float Bias){
	float Att = 0.0f;
	//Calculate tangent+bitangent vectors to nDir.
	vec3 YAxis = vec3(0.0f, 1.0f, 0.0f);
	vec3 XAxis = vec3(1.0f, 0.0f, 0.0f);
	float Ctrl = step(abs(dot(nDir, YAxis)), 0.8f);
	
	vec3 Tangent = normalize(cross(nDir, YAxis)*Ctrl + cross(nDir, XAxis)*(1.0f-Ctrl));
	vec3 BiTangent = cross(nDir, Tangent);
	
	Tangent = Tangent*iShadowCubeSize.x*2.0f;
	BiTangent = BiTangent*iShadowCubeSize.y*2.0f;

	Depth = clamp(Depth-Bias, 0.0f, 1.0f);
	Att += texture(DepthCubeTex, vec4(nDir + Tangent*-1.0f + BiTangent*-1.0f, Layer), Depth);
	Att += texture(DepthCubeTex, vec4(nDir + Tangent* 1.0f + BiTangent*-1.0f, Layer), Depth);
	Att += texture(DepthCubeTex, vec4(nDir + Tangent*-1.0f + BiTangent* 1.0f, Layer), Depth);
	Att += texture(DepthCubeTex, vec4(nDir + Tangent* 1.0f + BiTangent* 1.0f, Layer), Depth);
	return Att*0.25f;
}

float doPointShadow(int TargetPass, vec3 Dir){
	if(TargetPass==-1) return 1.0f;
	vec3 aDir = abs(Dir);
	//Calculate fragments z depth:
	float Z = max(max(aDir.x, aDir.y), aDir.z);
	float Depth = -TargetValues[TargetPass].y+TargetValues[TargetPass].z/Z;
	Depth = (Depth+1.0f)*0.5f; //Map from -1-1 space.
	return PCFFilterCube(Dir*vec3(1.0f, -1.0f, 1.0f), TargetValues[TargetPass].x, Depth, -0.00005f);
}
	
bool doDirectionShadow(int TargetPass, vec4 TPositions[MaxPasses], out float Att){
	if(TargetPass==-1) return false;
	vec4 sPosition = TPositions[TargetPass];
	sPosition /= sPosition.w;
	vec2 sTexCoord = sPosition.xy*0.5f+0.5f;
	if(clamp(sTexCoord.x, 0.0f, 1.0f)!=sTexCoord.x || clamp(sTexCoord.y, 0.0f, 1.0f)!=sTexCoord.y || clamp(sPosition.z, -1.0f, 1.0f)!=sPosition.z) return false;
	Att = PCFFilter(sTexCoord, TargetValues[TargetPass].x, sPosition.z, -0.0001f);
	return true;
}

float doSpotShadow(int TargetPass, vec4 TPositions[MaxPasses]){
	if(TargetPass==-1) return 1.0f;
	vec4 sPosition = TPositions[TargetPass];
	sPosition /= sPosition.w;
	vec2 sTexCoord = sPosition.xy*0.5f+0.5f;
	return PCFFilter(sTexCoord, TargetValues[TargetPass].x, sPosition.z, -0.0001f);
}